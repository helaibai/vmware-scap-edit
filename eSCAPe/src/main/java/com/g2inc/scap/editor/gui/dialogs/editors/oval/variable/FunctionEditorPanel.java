package com.g2inc.scap.editor.gui.dialogs.editors.oval.variable;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import org.apache.log4j.Logger;

import com.g2inc.scap.library.domain.oval.OvalFunction;
import com.g2inc.scap.library.schema.NameDoc;

public class FunctionEditorPanel extends javax.swing.JPanel
{
	private static final long serialVersionUID = 1L;
	private static final Logger log = Logger.getLogger(FunctionEditorPanel.class);
	
	private OvalFunction ovalFunction = null;

    public FunctionEditorPanel()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        functionTypeCaption = new javax.swing.JLabel();
        functionTypeLabel = new javax.swing.JLabel();
        explanationScrollPane = new javax.swing.JScrollPane();
        explanationTextArea = new javax.swing.JTextArea();
        childCountTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        functionTypeCaption.setFont(new java.awt.Font("Tahoma", 0, 12));
        functionTypeCaption.setText("Function");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(9, 10, 0, 5);
        add(functionTypeCaption, gridBagConstraints);

        functionTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        functionTypeLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        functionTypeLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        functionTypeLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        functionTypeLabel.setMinimumSize(new java.awt.Dimension(128, 255));
        functionTypeLabel.setPreferredSize(new java.awt.Dimension(128, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 4, 5);
        add(functionTypeLabel, gridBagConstraints);

        explanationTextArea.setBackground(new java.awt.Color(240, 240, 240));
        explanationTextArea.setColumns(20);
        explanationTextArea.setEditable(false);
        explanationTextArea.setFont(new java.awt.Font("Tahoma", 0, 12));
        explanationTextArea.setLineWrap(true);
        explanationTextArea.setRows(5);
        explanationTextArea.setWrapStyleWord(true);
        explanationScrollPane.setViewportView(explanationTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 5);
        add(explanationScrollPane, gridBagConstraints);

        childCountTextField.setEditable(false);
        childCountTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 5);
        add(childCountTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField childCountTextField;
    private javax.swing.JScrollPane explanationScrollPane;
    private javax.swing.JTextArea explanationTextArea;
    private javax.swing.JLabel functionTypeCaption;
    private javax.swing.JLabel functionTypeLabel;
    // End of variables declaration//GEN-END:variables


    public void setOvalFunction(OvalFunction ovalFunction)
    {
        this.ovalFunction = ovalFunction;
        String functionType = ovalFunction.getType().toString();
        functionTypeLabel.setText(functionType);
        String enumTypeName = ovalFunction.getEnumerationTypeName();
        
    //    log.debug("enumTypeName=" + enumTypeName);
        NameDoc nameDoc = ovalFunction.getParentDocument().getEnumerationNameDoc(ovalFunction.getEnumerationTypeName());
        String explanation = (nameDoc == null ? "No documentation available" : nameDoc.getDocumentation());
        explanationTextArea.setText(explanation);
        StringBuilder childCountText = new StringBuilder("The " + functionType + " function requires ");
        if (ovalFunction.getMinComponentGroups() == 1 && ovalFunction.getMaxComponentGroups() == 1) {
            childCountText.append("exactly one Component Group");
        } else {
            childCountText.append("at least ");
            childCountText.append(Integer.toString(ovalFunction.getMinComponentGroups()));
            if (ovalFunction.getMaxComponentGroups() != Integer.MAX_VALUE) {
                childCountText.append(" but no more than ");
                childCountText.append(Integer.toString(ovalFunction.getMaxComponentGroups()));
            }
            childCountText.append(" Component Groups");
        }
        childCountTextField.setText(childCountText.toString());
    }
}
