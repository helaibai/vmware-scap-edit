package com.g2inc.scap.editor.gui.wizards.cpe;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.util.regex.Pattern;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.apache.log4j.Logger;

import com.g2inc.scap.editor.gui.resources.EditorMessages;
import com.g2inc.scap.editor.gui.wizards.Wizard;
import com.g2inc.scap.editor.gui.wizards.WizardPage;
import com.g2inc.scap.library.domain.SCAPDocumentTypeEnum;

public class NewCPEDictionaryWizardPage extends WizardPage implements ChangeListener
{
    private static Logger log = Logger.getLogger(NewCPEDictionaryWizardPage.class);
    
    //public static String PATTERN_STRING = "^(?!-)(?!(.+[\\\\/]-)).+-cpe-dictionary\\.xml$";
    public static String PATTERN_STRING = "^.+$";
    public static String OVERVIEW_STRING = "<HTML>Choose a filename for your new " + EditorMessages.CPE + " Dictionary</HTML>";
    public static String FILENAME_CAPTION_STRING = "Filename must end in '-cpe-dictionary.xml'";

    private NewCPEDictionaryWizard parentWiz = null;

    private void initFilenamePicker()
    {
        Pattern p = null;
        String pString = PATTERN_STRING;
        try
        {
            p = Pattern.compile(pString);
            filenamePicker.setFilenamePattern(p);
        }
        catch(Exception e)
        {
            log.error("Error compiling pattern " + pString, e);
        }

        filenamePicker.addDefaultExtension("-cpe-dictionary.xml");

        filenamePicker.setApproveButtonText("Save");
        filenamePicker.setApproveButtonTooltipText("Save");

        filenamePicker.setBrowseButtonText("Browse");
        filenamePicker.setBrowseButtonTooltipText("Browse for file");

        filenamePicker.setOverviewText(OVERVIEW_STRING);

        filenamePicker.setFilenameCaption(FILENAME_CAPTION_STRING);

        filenamePicker.addChangeListener(this);
    }

    private void initCombo()
    {
        versionCombo.removeAllItems();

        SCAPDocumentTypeEnum[] values = SCAPDocumentTypeEnum.values();

        for(int x = 0; x < values.length; x++)
        {
            SCAPDocumentTypeEnum val = values[x];

            if(val.toString().toLowerCase().indexOf("cpe") > -1)
            {
                versionCombo.addItem(val);
            }
        }

        versionCombo.setSelectedItem(SCAPDocumentTypeEnum.CPE_22);
    }

    private void initButtonListeners()
    {
    }

    private void initComponents2()
    {
        initCombo();
        initButtonListeners();
        initFilenamePicker();
    }

    /** Creates new form ChoseVariableTypeWizardPage */
    public NewCPEDictionaryWizardPage()
    {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        versionCaption = new javax.swing.JLabel();
        versionCombo = new javax.swing.JComboBox();
        filenamePicker = new com.g2inc.scap.editor.gui.windows.common.FilenamePicker();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        versionCaption.setText("Version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 6);
        jPanel1.add(versionCaption, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(versionCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 3, 0);
        add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filenamePicker, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.g2inc.scap.editor.gui.windows.common.FilenamePicker filenamePicker;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel versionCaption;
    private javax.swing.JComboBox versionCombo;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public Object getData()
    {
        return null;
    }

    
    @Override
    public void setData(Object data)
    {
    }

    
    @Override
    public void setWizard(Wizard wizard)
    {
        parentWiz = (NewCPEDictionaryWizard) wizard;
    }

    @Override
    public String getPageTitle()
    {
        return "New " + EditorMessages.CPE + " Dictionary document";
    }

    
    @Override
    public void performFinish()
    {

    }

    /**
     * Get the version the user selected.
     *
     * @return SCAPDocumentTypeEnum
     */
    public SCAPDocumentTypeEnum getVersion()
    {
        return (SCAPDocumentTypeEnum) versionCombo.getSelectedItem();
    }

    /**
     * Get the filename the user selected.
     *
     * @return String
     */
    public String getFilename()
    {
        return filenamePicker.getFilenameText();
    }

    @Override
    public void stateChanged(ChangeEvent e)
    {
        Object src = e.getSource();

        if(src == filenamePicker)
        {
            if(filenamePicker.isValidFilename())
            {
                setSatisfied(true);
                if(parentWiz != null)
                    parentWiz.enableNextButton();
            }
            else
            {
                setSatisfied(false);
                if(parentWiz != null)
                    parentWiz.disableNextButton();
            }
        }
    }
}
