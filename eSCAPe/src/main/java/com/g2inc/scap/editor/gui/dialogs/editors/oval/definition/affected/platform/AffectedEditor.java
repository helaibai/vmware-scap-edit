package com.g2inc.scap.editor.gui.dialogs.editors.oval.definition.affected.platform;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.util.List;

import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.log4j.Logger;

public class AffectedEditor extends javax.swing.JPanel implements IEditorPage
{
    private static final Logger LOG = Logger.getLogger(AffectedEditor.class);

    private EditorDialog parentEditor = null;
    private String selectedPlatform = null;
    private String searchString = null;
    private AffectedTableModel tableModel = null;
    private List<String> allNames = null;
    private List<String> allTitles = null;
    private List<String> matchingNames = null;
    private List<String> matchingTitles = null;
    private String type = null;   // type is "Platform" or "Product"
    String family = null;

    private void initComponents2() {
        selectedPlatform = null;
        selectedPlatformField.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                selectedPlatform = selectedPlatformField.getText();
            }
        });
        platformCaption.setText(type);
        selectedPlatformCaption.setText("Selected/Entered " + type);
        tableModel = new AffectedTableModel();
        searchStringField.setText("");
        searchStringField.getDocument().addDocumentListener(new SearchStringDocumentListener());
        tableModel.setNameList(allNames);
        tableModel.setTitleList(allTitles);
        searchResultsTable.setModel(tableModel);
        searchResultsTable.getSelectionModel().addListSelectionListener(new TableSelectionListener());
    }

    public AffectedEditor(String type, List<String> allNames, List<String> allTitles) {
        this.type = type;
        this.allNames = allNames;
        this.allTitles = allTitles;
        initComponents();
        initComponents2();
    }

    /** Creates new form AffectedPlatformEditor */
    public AffectedEditor()
    {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        platformCaption = new javax.swing.JLabel();
        searchStringField = new javax.swing.JTextField();
        searchStringCaption = new javax.swing.JLabel();
        SearchResultsScrollPane = new javax.swing.JScrollPane();
        searchResultsTable = new javax.swing.JTable();
        selectedPlatformCaption = new javax.swing.JLabel();
        selectedPlatformField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        platformCaption.setText("Platform");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(platformCaption, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        add(searchStringField, gridBagConstraints);

        searchStringCaption.setText("Search String:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        add(searchStringCaption, gridBagConstraints);

        searchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        searchResultsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        SearchResultsScrollPane.setViewportView(searchResultsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 5);
        add(SearchResultsScrollPane, gridBagConstraints);

        selectedPlatformCaption.setText("Selected/Entered Platform:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        add(selectedPlatformCaption, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        add(selectedPlatformField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane SearchResultsScrollPane;
    private javax.swing.JLabel platformCaption;
    private javax.swing.JTable searchResultsTable;
    private javax.swing.JLabel searchStringCaption;
    private javax.swing.JTextField searchStringField;
    private javax.swing.JLabel selectedPlatformCaption;
    private javax.swing.JTextField selectedPlatformField;
    // End of variables declaration//GEN-END:variables

    @Override
    public Object getData() {
//        selectedPlatform = null;
//        int selectedRow = searchResultsTable.getSelectedRow();
//        if (selectedRow != -1 && matchingTitles != null && selectedRow < matchingTitles.size()) {
//            selectedPlatform = matchingTitles.get(selectedRow);
//        }
        return selectedPlatform;
    }
    
//    public void setOptions()
//    {
//        SCAPContentManager scm = SCAPContentManager.getInstance();
//
//        SCAPDocumentBundle officialCPEDict = scm.getOffcialCPEDictionary();
//        List<String> comboOptions = officialCPEDict.getCPEPlatformTitles(family);
//
//        for(int x = 0; x < comboOptions.size(); x++)
//        {
//            platformCombo.addItem(comboOptions.get(x));
//        }
//        AutoCompleteDecorator.decorate(platformCombo);
//    }

    @Override
    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
    }

    @Override
    public void setData(Object data) {
    }

    private class SearchStringDocumentListener implements DocumentListener {

        private void processChange() {
            matchingNames = new ArrayList<String>();
            matchingTitles = new ArrayList<String>();
            searchString = searchStringField.getText();
            if (!searchString.startsWith("^") && !searchString.startsWith(".*")) {
                searchString = ".*" + searchString;
            }
            if (!searchString.endsWith("$") && !searchString.endsWith(".*")) {
                searchString = searchString +  ".*";
            }
            Pattern pattern = Pattern.compile(searchString);
            for (int i=0; i<allNames.size(); i++) {
                String name = allNames.get(i);
                String title = allTitles.get(i);
                if (pattern.matcher(name).matches() || pattern.matcher(title).matches()) {
                    matchingNames.add(name);
                    matchingTitles.add(title);
                }
            }
            tableModel.setNameList(matchingNames);
            tableModel.setTitleList(matchingTitles);
            tableModel.fireTableDataChanged();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            processChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            processChange();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            processChange();
        }

    }

    private class TableSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            selectedPlatform = null;
            int row = e.getFirstIndex();
            if (matchingTitles != null && row < matchingTitles.size()) {
                selectedPlatform = matchingTitles.get(row);
                selectedPlatformField.setText(selectedPlatform);
            }
        }

    }
}
