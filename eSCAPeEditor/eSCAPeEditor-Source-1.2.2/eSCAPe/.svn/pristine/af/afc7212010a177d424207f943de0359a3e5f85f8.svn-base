package com.g2inc.scap.editor.gui.windows.xccdf;

/* ESCAPE Software   Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.io.IOException;
import java.io.StringWriter;

import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;

import com.g2inc.scap.editor.gui.util.EditorUtil;
import com.g2inc.scap.editor.gui.windows.EditorForm;
import com.g2inc.scap.editor.gui.windows.EditorMainWindow;
import com.g2inc.scap.editor.gui.windows.common.GenericSourceDetailTab;
import com.g2inc.scap.library.domain.SCAPDocumentTypeEnum;
import com.g2inc.scap.library.domain.SCAPElement;
import com.g2inc.scap.library.domain.xccdf.Profile;

public class ProfileDetailTab extends javax.swing.JPanel implements ChangeListener
{

    private Profile profile = null;
    private JFrame parentWin = null;
    private GenericSourceDetailTab sourceTab = null;
    private ProfileAttributesDetailTab attributesTab = null;
    private ItemMetadataDetailTab itemMetadataTab = null;
    private ProfileTreePanel treeTab = null;

    /** Creates new form DefinitionDetailTab */
    public ProfileDetailTab()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        itemDetailPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.ItemDetailPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Profile", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText)); // NOI18N
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(itemDetailPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.g2inc.scap.editor.gui.windows.xccdf.ItemDetailPanel itemDetailPanel1;
    // End of variables declaration//GEN-END:variables

    public JFrame getParentWin()
    {
        return parentWin;
    }

    public void setParentWin(JFrame parentWin)
    {
        this.parentWin = parentWin;
    }

    public void setTabs(JTabbedPane detailTabPane)
    {
        detailTabPane.addTab("General", this);

        attributesTab = new ProfileAttributesDetailTab();
        attributesTab.setDoc(profile);
        attributesTab.addChangeListener(this);
        detailTabPane.addTab("Attributes", attributesTab);
        
        if (((SCAPElement)profile).getSCAPDocument().getDocumentType() == SCAPDocumentTypeEnum.XCCDF_12) {
            itemMetadataTab = new ItemMetadataDetailTab();
            itemMetadataTab.setDoc(profile);
            itemMetadataTab.addChangeListener(this);
            detailTabPane.addTab("Metadata", itemMetadataTab);
        }

        treeTab = new ProfileTreePanel();
        treeTab.setDoc(profile);
        treeTab.addChangeListener(this);
        detailTabPane.addTab("Children", treeTab);
    }

    public GenericSourceDetailTab getSourceTab()
    {
        return sourceTab;
    }

    public void setSourceTab(GenericSourceDetailTab sourceTab)
    {
        this.sourceTab = sourceTab;
    }

    private void updateSource()
    {
        StringWriter sw = new StringWriter();
        XMLOutputter xmlo = new XMLOutputter(Format.getPrettyFormat());

        try
        {
            xmlo.output(profile.getElement(), sw);
            sourceTab.setXMLSource(sw.toString());
            sw.close();
        }
        catch (IOException ioe)
        {
        }
    }

    public Profile getDoc()
    {
        profile = (Profile) itemDetailPanel1.getDoc();
        return profile;
    }

    public void setDoc(Profile doc)
    {
        this.profile = doc;
        itemDetailPanel1.setDoc(profile);
        itemDetailPanel1.addChangeListener(this);
    }

    @Override
    public void stateChanged(ChangeEvent ce)
    {
        Object src = ce.getSource();
        EditorMainWindow mainWin = EditorMainWindow.getInstance();

        if(src == itemDetailPanel1
                || src == attributesTab
                || src == itemMetadataTab)
        {
            updateSource();
            EditorUtil.markActiveWindowDirty(mainWin, true);
        }
        else if(src == treeTab)
        {
            updateSource();
            EditorUtil.markActiveWindowDirty(mainWin, true);
            EditorForm activeEditorForm = mainWin.getActiveEditorForm();

            if(activeEditorForm != null && activeEditorForm instanceof XCCDFEditorForm)
            {
                XCCDFEditorForm parentEditorForm = (XCCDFEditorForm) activeEditorForm;

                parentEditorForm.refreshProfileNode(profile);
            }
        }
    }
}
