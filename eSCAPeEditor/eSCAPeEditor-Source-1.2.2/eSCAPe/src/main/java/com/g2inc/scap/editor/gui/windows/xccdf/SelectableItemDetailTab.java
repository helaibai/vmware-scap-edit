package com.g2inc.scap.editor.gui.windows.xccdf;

/* ESCAPE Software   Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.apache.log4j.Logger;

import com.g2inc.scap.editor.gui.windows.common.ChangeNotifierPanel;
import com.g2inc.scap.library.domain.xccdf.Conflicts;
import com.g2inc.scap.library.domain.xccdf.Rationale;
import com.g2inc.scap.library.domain.xccdf.Requires;
import com.g2inc.scap.library.domain.xccdf.SelectableItem;
import com.g2inc.scap.library.domain.xccdf.XCCDFBenchmark;

public class SelectableItemDetailTab extends ChangeNotifierPanel implements ChangeListener, ItemListener
{

    private SelectableItem selItem = null;
    private JFrame parentWin = null;
    private static Logger log = Logger.getLogger(SelectableItemDetailTab.class);

    /** Creates new form DefinitionDetailTab */
    public SelectableItemDetailTab()
    {
        initComponents();
        initComponents2();
        platformPanel1.addChangeListener(this);
        conflictsListPanel1.addChangeListener(this);
        rationaleListPanel1.addChangeListener(this);
        requiresListPanel2.addChangeListener(this);
    }

    @Override
    public void itemStateChanged(ItemEvent e)
    {
        Object src = e;

        if(src == selectedCheckBox)
        {
            selItem.setSelected(e.getStateChange() == ItemEvent.SELECTED);
        }
    }

    private void initComponents2()
    {
        selectedCheckBox.addItemListener(this);

        weightTextField.getDocument().addDocumentListener(new DocumentListener()
        {
            private void common(DocumentEvent de)
            {
                String text = weightTextField.getText();
                double weight = 1.0;
                if (text.length() > 0)
                {
                    try
                    {
                        weight = Double.parseDouble(text);
                    }
                    catch (NumberFormatException e)
                    {
                        weight = 1.0;
                    }
                }
                selItem.setWeight(weight);
            }

            @Override
            public void insertUpdate(DocumentEvent de)
            {
                common(de);
            }

            @Override
            public void removeUpdate(DocumentEvent de)
            {
                common(de);
            }

            @Override
            public void changedUpdate(DocumentEvent de)
            {
                common(de);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        platformPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.PlatformPanel();
        requiresListPanel2 = new com.g2inc.scap.editor.gui.windows.xccdf.RequiresListPanel();
        conflictsListPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.ConflictsListPanel();
        rationaleListPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.RationaleListPanel();
        weightCaption = new javax.swing.JLabel();
        weightTextField = new javax.swing.JTextField();
        selectedCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        add(platformPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        add(requiresListPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        add(conflictsListPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(rationaleListPanel1, gridBagConstraints);

        weightCaption.setText("Weight:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 0, 0);
        add(weightCaption, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(weightTextField, gridBagConstraints);

        selectedCheckBox.setText("Selected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 5);
        add(selectedCheckBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.g2inc.scap.editor.gui.windows.xccdf.ConflictsListPanel conflictsListPanel1;
    private com.g2inc.scap.editor.gui.windows.xccdf.PlatformPanel platformPanel1;
    private com.g2inc.scap.editor.gui.windows.xccdf.RationaleListPanel rationaleListPanel1;
    private com.g2inc.scap.editor.gui.windows.xccdf.RequiresListPanel requiresListPanel2;
    private javax.swing.JCheckBox selectedCheckBox;
    private javax.swing.JLabel weightCaption;
    private javax.swing.JTextField weightTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public JFrame getParentWin()
    {
        return parentWin;
    }

    @Override
    public void setParentWin(JFrame parentWin)
    {
        this.parentWin = parentWin;
    }
    // End of variables declaration

    @Override
    public void stateChanged(ChangeEvent ce)
    {
        Object eventSource = ce.getSource();
        log.debug("stateChanged called with " + eventSource.getClass().getName());
        if (eventSource == platformPanel1)
        {
            log.debug("stateChanged called from platformPanel1");
            selItem.setPlatformList(platformPanel1.getDoc());
            notifyRegisteredListeners();
        }
        else if (eventSource == requiresListPanel2)
        {
            log.debug("stateChanged called from requiresListPanel2");
            selItem.setRequiresList(requiresListPanel2.getDoc());
            notifyRegisteredListeners();
        }
        else if (eventSource == conflictsListPanel1)
        {
            log.debug("stateChanged called from conflictsListPanel1");
            selItem.setConflictsList(conflictsListPanel1.getDoc());
            notifyRegisteredListeners();
        }
        else if (eventSource == rationaleListPanel1)
        {
            log.debug("stateChanged called from rationaleListPanel1");
            selItem.setRationaleList(rationaleListPanel1.getDoc());
            notifyRegisteredListeners();
        }
    }

    public void setDoc(SelectableItem selItem)
    {
        this.selItem = selItem;
        XCCDFBenchmark benchmark = (XCCDFBenchmark) selItem.getSCAPDocument();

        List<String> platformList = selItem.getPlatformList();
        platformPanel1.setDoc(platformList);

        List<Requires> requiresList = selItem.getRequiresList();
        requiresListPanel2.setDoc(requiresList);

        List<Conflicts> conflictsList = selItem.getConflictsList();
        conflictsListPanel1.setDoc(conflictsList);

        List<Rationale> rationaleList = selItem.getRationaleList();
        rationaleListPanel1.setDoc(rationaleList);
        rationaleListPanel1.setXCCDFBenchmark(benchmark);

        Double weight = selItem.getWeight();
        weightTextField.setText((weight == null ? null : weight.toString()));

        selectedCheckBox.setSelected(selItem.isSelected());
    }
}
