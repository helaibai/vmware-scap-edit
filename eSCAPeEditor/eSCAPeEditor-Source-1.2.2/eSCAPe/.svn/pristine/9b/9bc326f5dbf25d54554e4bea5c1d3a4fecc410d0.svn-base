package com.g2inc.scap.editor.gui.dialogs.editors.xccdf;

/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.PlainDocument;

import org.apache.log4j.Logger;

import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import com.g2inc.scap.editor.gui.windows.common.ChangeNotifierPanel;
import com.g2inc.scap.library.domain.xccdf.DublinCoreElement;

public class DublinCoreElementEditor extends ChangeNotifierPanel implements IEditorPage, ChangeListener
{
    private DublinCoreElement dublinCoreElement = null;

    private EditorDialog parentEditor = null;
    private static final Logger LOG = Logger.getLogger(DublinCoreElementEditor.class);

    private void initTextFields()
    {
        plainTextArea.setDocument(new PlainDocument());
        plainTextArea.getDocument().addDocumentListener(new DocumentListener()
        {

            public void common()
            {
                String plainText = plainTextArea.getText();
                dublinCoreElement.setText(plainText);
            }

            @Override
            public void insertUpdate(DocumentEvent arg0)
            {
                common();
            }

            @Override
            public void removeUpdate(DocumentEvent arg0)
            {
                common();
            }

            @Override
            public void changedUpdate(DocumentEvent arg0)
            {
                common();
            }
        });
    }

    private void initComponents2()
    {
        initTextFields();
    }

    /** Creates new form RegexDatatypeEditor */
    public DublinCoreElementEditor()
    {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        elementNameCaption = new javax.swing.JLabel();
        elementNameLabel = new javax.swing.JLabel();
        langPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.LangPanel();
        stringValueCaption = new javax.swing.JLabel();
        plainTextAreaPane = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();

        jPanel1.setLayout(new java.awt.GridBagLayout());

        elementNameCaption.setText("Element Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(elementNameCaption, gridBagConstraints);

        elementNameLabel.setText("foo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(elementNameLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 11, 0, 0);
        add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 3, 0);
        add(langPanel1, gridBagConstraints);

        stringValueCaption.setText("String Text:");
        stringValueCaption.setAlignmentY(0.0F);
        stringValueCaption.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 5, 5);
        add(stringValueCaption, gridBagConstraints);

        plainTextArea.setColumns(20);
        plainTextArea.setRows(5);
        plainTextAreaPane.setViewportView(plainTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 8);
        add(plainTextAreaPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel elementNameCaption;
    private javax.swing.JLabel elementNameLabel;
    private javax.swing.JPanel jPanel1;
    private com.g2inc.scap.editor.gui.windows.xccdf.LangPanel langPanel1;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JScrollPane plainTextAreaPane;
    private javax.swing.JLabel stringValueCaption;
    // End of variables declaration//GEN-END:variables

    @Override
    public Object getData()
    {
        return dublinCoreElement;
    }

    @Override
    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
        parentEditor.setTitle("Notice Editor");
    }

    @Override
    public void setData(Object data)
    {
        dublinCoreElement = (DublinCoreElement) data;
        elementNameLabel.setText(dublinCoreElement.getName());
        langPanel1.setLang(dublinCoreElement.getLang());
        langPanel1.addChangeListener(this);

        String string = dublinCoreElement.getText();
        if (data == null)
        {
            plainTextArea.setText("");
        }
        else
        {
            plainTextArea.setText(string.trim());
        }
        plainTextArea.requestFocus();
    }

    @Override
    public void stateChanged(ChangeEvent ce)
    {
        Object src = ce.getSource();

        if(src == langPanel1)
        {
            dublinCoreElement.setLang(langPanel1.getLang());
        }
    }
}
