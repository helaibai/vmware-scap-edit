package com.g2inc.scap.editor.gui.dialogs.editors.xccdf;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.g2inc.scap.editor.gui.choosers.xccdf.GroupChooser;
import com.g2inc.scap.editor.gui.choosers.xccdf.RuleChooser;
import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import com.g2inc.scap.editor.gui.util.EditorUtil;
import com.g2inc.scap.editor.gui.windows.EditorMainWindow;
import com.g2inc.scap.editor.gui.windows.common.DocumentListenerAdaptor;
import com.g2inc.scap.library.domain.xccdf.ComplexValueElement;
import com.g2inc.scap.library.domain.xccdf.SelComplexValueElement;

import javax.swing.event.DocumentEvent;

public class SelComplexValueElementEditor extends JPanel implements IEditorPage, ChangeListener
{
    private EditorDialog parentEditor = null;
    private SelComplexValueElement complexValueElement = null;

    private void initComponents2() {
        initTextFields();
    }
    
    private void initTextFields() {
		selectorTextField.getDocument().addDocumentListener(new DocumentListenerAdaptor() {

			@Override
			public void changed(DocumentEvent de) {
				complexValueElement.setSelector(selectorTextField.getText());
			}
		});
    }

    public SelComplexValueElementEditor()
    {
        initComponents();
        initComponents2();
		itemListPanel1.addChangeListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        SelectorCaption = new javax.swing.JLabel();
        selectorTextField = new javax.swing.JTextField();
        itemListPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.StringListPanel();

        setLayout(new java.awt.GridBagLayout());

        SelectorCaption.setText("Selector:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(SelectorCaption, gridBagConstraints);

        selectorTextField.setPreferredSize(new java.awt.Dimension(255, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 5, 6);
        add(selectorTextField, gridBagConstraints);

        itemListPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Items"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(itemListPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SelectorCaption;
    private com.g2inc.scap.editor.gui.windows.xccdf.StringListPanel itemListPanel1;
    private javax.swing.JTextField selectorTextField;
    // End of variables declaration//GEN-END:variables

    public ComplexValueElement getData() {
		return complexValueElement;
    }

    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
        parentEditor.setTitle("Complex Value Editor");
    }

    public void setData(Object data)
    {
		complexValueElement = (SelComplexValueElement) data;
		if (complexValueElement != null) {
			List<String> list = complexValueElement.getItemList();
			itemListPanel1.setDoc(list);
            selectorTextField.setText(complexValueElement.getSelector());
		} else {
            selectorTextField.setText("");
        }
    }

    public void stateChanged(ChangeEvent ce) {
		Object eventSource = ce.getSource();
        if (eventSource == itemListPanel1) {
            if(itemListPanel1.hasChanged()) {
				complexValueElement.setItemList(itemListPanel1.getDoc());
                EditorUtil.markActiveWindowDirty(EditorMainWindow.getInstance(), true);
            }
        }
    }
}
