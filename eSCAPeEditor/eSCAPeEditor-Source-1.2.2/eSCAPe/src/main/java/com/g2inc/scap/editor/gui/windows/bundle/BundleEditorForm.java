package com.g2inc.scap.editor.gui.windows.bundle;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

import org.apache.log4j.Logger;

import com.g2inc.scap.editor.gui.resources.EditorMessages;
import com.g2inc.scap.editor.gui.windows.EditorForm;
import com.g2inc.scap.editor.gui.windows.EditorMainWindow;
import com.g2inc.scap.library.domain.bundle.SCAPDocumentBundle;

public abstract class BundleEditorForm extends EditorForm implements InternalFrameListener
{
    private static Logger log = Logger.getLogger(BundleEditorForm.class);
    protected List<EditorForm> openDocWindows = new ArrayList<EditorForm>();

    protected SCAPDocumentBundle bundle;
    protected final String TITLE_BASE = EditorMessages.SCAP + " Data Stream -- ";
    
    /** Creates new form NewJInternalFrame */
    public BundleEditorForm(SCAPDocumentBundle bundle)
    {
    	super();
        this.bundle = bundle;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("SCAP Data Stream-- c:\\foo\\bundle");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public SCAPDocumentBundle getBundle()
    {
        return bundle;
    }

    public void setSource(String fname)
    {
        setTitle(TITLE_BASE + fname);
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e)
    {
        log.debug(getTitle() + "(activated)");        
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e)
    {
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e)
    {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e)
    {
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e)
    {
    }

    @Override
    public void internalFrameOpened(InternalFrameEvent e)
    {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent ife)
    {
        Object src = ife.getSource();
        EditorMainWindow mw = EditorMainWindow.getInstance();

        if(src instanceof BundleEditorForm)
        {
            // it's the bundle editor form itself that's closing

            if(openDocWindows != null && openDocWindows.size() > 0)
            {
                for(int x = 0; x < openDocWindows.size(); x++)
                {
                    EditorForm ef = openDocWindows.get(x);

                    ef.setVisible(false);
                    mw.getDesktopPane().remove(ef);
                    mw.decrementOpenDocuments();
                }

                openDocWindows.clear();
            }

            if(bundle.isDirty())
            {
                Object[] options = { "Save", "Discard" };

                String message = "Document bundle has unsaved changes.  Do you want to save or discard changes?";
                String dTitle = "Unsaved changes";

                int n = JOptionPane.showOptionDialog(this, message,
                        dTitle, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

                if(n == JOptionPane.DEFAULT_OPTION || n == JOptionPane.YES_OPTION)
                {
                    try
                    {
                        bundle.save();
                        bundle.setDirty(false);
                    }
                    catch(Exception e)
                    {
                        log.error("Error saving bundle", e);
                        String errMessage = "Document bundle couldn't be saved.  An error occured: " + e.getMessage();
                        dTitle = "File save error";

                        JOptionPane.showMessageDialog(this, errMessage, dTitle, JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            bundle.closeBundle();

            mw.decrementOpenDocuments();
            ((BundleEditorForm)src).setVisible(false);
            mw.getDesktopPane().remove((BundleEditorForm) src);
        }
        else
        {
            // it's one of the documents opened by the bundle editor form
            EditorForm ef = (EditorForm) src;

            ef.setVisible(false);
            mw.getDesktopPane().remove(ef);
            mw.decrementOpenDocuments();
        }
    }

    @Override
    public void refreshRootNode()
    {
    }
}
