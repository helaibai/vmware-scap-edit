package com.g2inc.scap.editor.gui.wizards.oval.state.create;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import com.g2inc.scap.editor.gui.wizards.Wizard;
import com.g2inc.scap.editor.gui.wizards.WizardPage;

public class PickStatePlatformWizardPage extends WizardPage
{
    private NewStateWizard parentWiz = null;
    private List<String> options = null;

    private void initCombo()
    {
        platformCombo.removeAllItems();

        for(int x = 0; x < options.size(); x++)
        {
            platformCombo.addItem(options.get(x));
        }

        platformCombo.setSelectedIndex(0);
        parentWiz.setChosenPlatform((String) platformCombo.getSelectedItem());
        
        parentWiz.enableNextButton();
        setSatisfied(true);

        platformCombo.addActionListener(new ActionListener()
        {
            
            public void actionPerformed(ActionEvent arg0)
            {
                parentWiz.setChosenPlatform((String) platformCombo.getSelectedItem());
                setSatisfied(true);
            }
        });
    }

    private void initComponents2()
    {
        initCombo();
    }

    public PickStatePlatformWizardPage(NewStateWizard wiz, List<String> options)
    {
        initComponents();
        parentWiz = wiz;
        this.options = options;
        initComponents2();

        platformCombo.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        overviewPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboPanel = new javax.swing.JPanel();
        platformCaption = new javax.swing.JLabel();
        platformCombo = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        overviewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Overview", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText)); // NOI18N
        overviewPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("<HTML>Pick one of the platforms below.  The list below represents those platforms valid for this version of the OVAL schema.</HTML>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);
        overviewPanel.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(overviewPanel, gridBagConstraints);

        comboPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        comboPanel.setLayout(new java.awt.GridBagLayout());

        platformCaption.setText("Platform");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 10, 0);
        comboPanel.add(platformCaption, gridBagConstraints);

        platformCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 6);
        comboPanel.add(platformCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 5, 6);
        add(comboPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel comboPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel overviewPanel;
    private javax.swing.JLabel platformCaption;
    private javax.swing.JComboBox platformCombo;
    // End of variables declaration//GEN-END:variables

    
    @Override
	public Object getData()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    
    @Override
	public void setData(Object data)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    
    @Override
	public void setWizard(Wizard wizard)
    {
        parentWiz = (NewStateWizard) wizard;
    }

    
    @Override
	public String getPageTitle()
    {
        return "Platform";
    }

    
    @Override
	public void performFinish()
    {
    }
}
