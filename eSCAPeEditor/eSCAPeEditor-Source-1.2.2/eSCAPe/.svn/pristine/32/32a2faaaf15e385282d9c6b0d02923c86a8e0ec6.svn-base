package com.g2inc.scap.editor.gui.wizards.xccdf;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.util.regex.Pattern;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.g2inc.scap.editor.gui.dialogs.editors.oval.datatype.string.NCNameDatatypeEditor;
import com.g2inc.scap.editor.gui.resources.EditorMessages;
import com.g2inc.scap.editor.gui.wizards.Wizard;
import com.g2inc.scap.editor.gui.wizards.WizardPage;
import com.g2inc.scap.library.domain.oval.XCCDFBuilderParameters;

public class CreateNewXCCDFParametersPage extends WizardPage implements ChangeListener
{
    private CreateXCCDFWizard parentWiz;
    private XCCDFBuilderParameters builderParms;

    private void initText()
    {
        Pattern ncNamePattern = NCNameDatatypeEditor.NCNAME_PATTERN;

        benchmarkIdField.addChangeListener(this);
        benchmarkIdField.setPattern(ncNamePattern);
    }

    private void initComponents2() {
        initText();
    }

    /** Creates new form CreateNewXCCDFParametersPage */
    public CreateNewXCCDFParametersPage()
    {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        parametersPanel = new javax.swing.JPanel();
        benchmarkIdCaption = new javax.swing.JLabel();
        benchmarkIdField = new com.g2inc.scap.editor.gui.dialogs.editors.oval.datatype.string.PatternedStringField();
        benchmarkDescriptionCaption = new javax.swing.JLabel();
        benchmarkDescriptionPane = new javax.swing.JScrollPane();
        benchmarkDescriptionTextArea = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setMinimumSize(new java.awt.Dimension(400, 300));
        setPreferredSize(new java.awt.Dimension(400, 300));
        setLayout(new java.awt.GridBagLayout());

        parametersPanel.setMinimumSize(new java.awt.Dimension(390, 75));
        parametersPanel.setPreferredSize(new java.awt.Dimension(390, 75));
        parametersPanel.setLayout(new java.awt.GridBagLayout());

        benchmarkIdCaption.setText("Benchmark ID: (e.g. Benchmark_1)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 11, 0, 0);
        parametersPanel.add(benchmarkIdCaption, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 5);
        parametersPanel.add(benchmarkIdField, gridBagConstraints);

        benchmarkDescriptionCaption.setText("Benchmark Description (optional):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 11, 0, 5);
        parametersPanel.add(benchmarkDescriptionCaption, gridBagConstraints);

        benchmarkDescriptionTextArea.setColumns(20);
        benchmarkDescriptionTextArea.setRows(5);
        benchmarkDescriptionPane.setViewportView(benchmarkDescriptionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 11, 0, 6);
        parametersPanel.add(benchmarkDescriptionPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.95;
        add(parametersPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    @Override
    public Object getData()
    {
        return null;
    }

    
    @Override
    public void setData(Object data)
    {       
    }

    
    @Override
    public void setWizard(Wizard wizard)
    {
        parentWiz = (CreateXCCDFWizard) wizard;
    }

    @Override
    public String getPageTitle()
    {
        return EditorMessages.XCCDF + " Benchmark details";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel benchmarkDescriptionCaption;
    private javax.swing.JScrollPane benchmarkDescriptionPane;
    private javax.swing.JTextArea benchmarkDescriptionTextArea;
    private javax.swing.JLabel benchmarkIdCaption;
    private com.g2inc.scap.editor.gui.dialogs.editors.oval.datatype.string.PatternedStringField benchmarkIdField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel parametersPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void performFinish()
    {
    }

    @Override
    public void stateChanged(ChangeEvent e)
    {
        Object src = e.getSource();

        if(src == benchmarkIdField)
        {
            // something changed in the that field, check if it's valid

            if(benchmarkIdField.isValidInput())
            {
                benchmarkIdCaption.setForeground(benchmarkIdField.getNormalTextColor());
                if(parentWiz != null)
                    parentWiz.enableNextButton();
            }
            else
            {
                benchmarkIdCaption.setForeground(benchmarkIdField.getErrorTextColor());
                if(parentWiz != null)
                    parentWiz.disableNextButton();
            }
        }
    }

    public String getChosenBenchmarkId()
    {
        return benchmarkIdField.getValue();
    }

    public String getChosenBenchmarkDescription()
    {
        return benchmarkDescriptionTextArea.getText();
    }
}
