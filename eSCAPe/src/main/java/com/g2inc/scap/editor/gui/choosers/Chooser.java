package com.g2inc.scap.editor.gui.choosers;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.util.List;

import javax.swing.JTree;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import com.g2inc.scap.editor.gui.util.Adder;
import com.g2inc.scap.editor.gui.util.EditorUtil;
import com.g2inc.scap.library.domain.SCAPDocument;

/**
 * Base class for all chooser types
 *
 * A chooser, given a source document and optionally a filter, can show you
 * a list of items from the source document.
 *
 * @author ssill2
 */
public abstract class Chooser extends javax.swing.JDialog implements TreeModelListener
{
    protected List<SCAPDocument> source = null;

    /**
     * The actual item chosen
     */
    protected Object chosen = null;

    /**
     * This is set if the chosen item was
     * created by clicking the new button in the chooser.
     */
    protected boolean newItemAdded = false;

    /**
     * This is set to false in the when the ok button is
     * clicked.   This tells us that something actually was
     * chosen.
     */
    protected boolean cancelled = true;

    /** Creates new form Chooser */
    public Chooser(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * The actual item chosen
     *
     * @return java.lang.Object
     */
    public Object getChosen()
    {
        return chosen;
    }

    /**
     * Return cancelled boolean
     *
     * @return boolean
     */
    public boolean wasCancelled()
    {
        return cancelled;
    }

    /**
     * Abstract method to be implemented by subclasses of this one.
     * This takes the source scap document and optionally some filters
     *
     * @return void
     */
    public abstract void setSource(SCAPDocument scapDoc, String type, String platform);

    /**
     * Return newItemAdded boolean
     *
     * @return boolean
     */
    public boolean newItemWasAdded()
    {
        return newItemAdded;
    }

    @Override
    public void treeNodesChanged(TreeModelEvent e)
    {
    }

    @Override
    public void treeNodesInserted(TreeModelEvent e)
    {
        treeNodeCountUpdate(e.getTreePath());
    }

    @Override
    public void treeNodesRemoved(TreeModelEvent e)
    {
        treeNodeCountUpdate(e.getTreePath());
    }

    @Override
    public void treeStructureChanged(TreeModelEvent e)
    {
    }

    private void treeNodeCountUpdate(TreePath path)
    {
        Object last = path.getLastPathComponent();

        if(last instanceof DefaultMutableTreeNode)
        {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) last;

            Object userObj = node.getUserObject();

            if(userObj instanceof String)
            {
                String name = (String) userObj;

                int loc = name.indexOf("(");

                if(loc > -1)
                {
                    String basename = name.substring(0, loc);

                    Adder childCount = new Adder(0);

                    EditorUtil.countChildren(node, childCount);

                    DefaultTreeModel model = (DefaultTreeModel) getTreeComp().getModel();
                    node.setUserObject(basename + "(" +  childCount.getValue() + ")");

                    model.nodeChanged(node);

                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                
                    if(parent != null)
                    {
                        treeNodeCountUpdate(new TreePath(parent.getPath()));
                    }
                }
            }
        }
    }

    protected abstract JTree getTreeComp();
}
