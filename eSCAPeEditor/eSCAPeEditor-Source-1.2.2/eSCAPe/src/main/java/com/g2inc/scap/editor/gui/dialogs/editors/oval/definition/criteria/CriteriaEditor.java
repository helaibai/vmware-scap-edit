package com.g2inc.scap.editor.gui.dialogs.editors.oval.definition.criteria;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import com.g2inc.scap.library.domain.oval.Criteria;
import com.g2inc.scap.library.domain.oval.OvalCriteriaOperatorEnum;

public class CriteriaEditor extends javax.swing.JPanel implements IEditorPage
{
    private Criteria criteria = null;

    private EditorDialog parentEditor = null;

    private void initCombos()
    {
        operatorCombo.removeAllItems();
        negateCombo.removeAllItems();

        negateCombo.addItem("true");
        negateCombo.addItem("false");

        negateCombo.setSelectedItem("false");
    }

    private void initComponents2()
    {
        initCombos();
    }

    /** Creates new form RegexDatatypeEditor */
    public CriteriaEditor()
    {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        operatorCaption = new javax.swing.JLabel();
        operatorCombo = new javax.swing.JComboBox();
        negateCaption = new javax.swing.JLabel();
        negateCombo = new javax.swing.JComboBox();
        commentCaption = new javax.swing.JLabel();
        commentField = new javax.swing.JTextField();

        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(340, 97));
        setPreferredSize(new java.awt.Dimension(340, 97));
        setLayout(new java.awt.GridBagLayout());

        operatorCaption.setText("Operator");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 11, 5, 5);
        add(operatorCaption, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 5, 5);
        add(operatorCombo, gridBagConstraints);

        negateCaption.setText("Negate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 5, 5);
        add(negateCaption, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(negateCombo, gridBagConstraints);

        commentCaption.setText("Comment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 12, 6, 0);
        add(commentCaption, gridBagConstraints);

        commentField.setMaximumSize(null);
        commentField.setMinimumSize(null);
        commentField.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 6, 5);
        add(commentField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel commentCaption;
    private javax.swing.JTextField commentField;
    private javax.swing.JLabel negateCaption;
    private javax.swing.JComboBox negateCombo;
    private javax.swing.JLabel operatorCaption;
    private javax.swing.JComboBox operatorCombo;
    // End of variables declaration//GEN-END:variables

    @Override
    public Object getData()
    {
        criteria.setOperator((OvalCriteriaOperatorEnum) operatorCombo.getSelectedItem());
        criteria.setNegated(Boolean.parseBoolean((String) negateCombo.getSelectedItem()));
        criteria.setComment(commentField.getText());
        
        return criteria;
    }

    public void setOptions(OvalCriteriaOperatorEnum[] comboOptions)
    {
        for(int x = 0; x < comboOptions.length; x++)
        {
            operatorCombo.addItem(comboOptions[x]);
        }
    }

    public void setNegated(boolean b)
    {
        negateCombo.setSelectedItem(b + "");
    }

    public boolean getNegated()
    {
        String negateChoice = (String) negateCombo.getSelectedItem();

        return Boolean.parseBoolean(negateChoice);
    }

    public void selectDefaultOperation(String defaultItem)
    {
        int itemCount = operatorCombo.getItemCount();

        boolean selectedSomething = false;

        for(int x = 0 ; x < itemCount; x++)
        {
            Object item = operatorCombo.getItemAt(x);

            if(item.equals(defaultItem))
            {
                operatorCombo.setSelectedIndex(x);
                selectedSomething = true;
                break;
            }
        }

        if(!selectedSomething)
        {
            if(itemCount > 0)
            {
                operatorCombo.setSelectedIndex(0);
            }
        }
    }

    @Override
    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
    }

    @Override
    public void setData(Object data)
    {
        criteria = (Criteria) data;

        selectDefaultOperation(criteria.getOperator().toString());
        setNegated(criteria.isNegated());
        commentField.setText(criteria.getComment());
    }
}
