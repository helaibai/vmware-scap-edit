package com.g2inc.scap.editor.gui.windows.xccdf;

/* ESCAPE Software   Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;

import org.apache.log4j.Logger;

import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import com.g2inc.scap.editor.gui.windows.common.ChangeNotifierPanel;
import com.g2inc.scap.editor.gui.windows.common.DocumentListenerAdaptor;
import com.g2inc.scap.library.domain.oval.OvalDefinition;
import com.g2inc.scap.library.domain.xccdf.Check;
import com.g2inc.scap.model.ocil.OcilDocument;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CheckDetailPanel extends ChangeNotifierPanel implements ChangeListener, ActionListener, IEditorPage, ItemListener
{

    private static final Logger LOG = Logger.getLogger(CheckDetailPanel.class);
    private static final long serialVersionUID = 1L;
    private Check check = null;
    private JFrame parentWin = null;
    private EditorDialog parentEditor = null;
    private static final String[] CHECK_SYSTEMS = {OvalDefinition.OVAL_NAMESPACE, OcilDocument.OCIL_NAMESPACE }; 
   

    /** Creates new form DefinitionDetailTab */
    public CheckDetailPanel()
    {
        initComponents();
        initComponents2();
    }

    @Override
    public void itemStateChanged(ItemEvent ie)
    {
//        Object src = ie.getSource();
//
//        if(src == useOvalCheckBox)
//        {
//            if (ie.getStateChange() == ItemEvent.SELECTED)
//            {
//                systemTextField.setText(OvalDefinition.OVAL_NAMESPACE);
//            }
//            else if (ie.getStateChange() == ItemEvent.DESELECTED)
//            {
//                systemTextField.setText(null);
//            }
//            notifyRegisteredListeners();
//        }
    }

    private void initComponents2()
    {
//        systemTextField.getDocument().addDocumentListener(new DocumentListenerAdaptor()
//        {
//            @Override
//            public void changed(DocumentEvent de)
//            {
//                if (check != null)
//                {
//                    check.setSystem(systemTextField.getText());
//                    notifyRegisteredListeners();
//                }
//            }
//        });
//
//        useOvalCheckBox.addItemListener(this);
        for (String system : CHECK_SYSTEMS) {
            systemIdCombo.addItem(system);
        }
        systemIdCombo.setEditable(true);
        systemIdCombo.addActionListener(this);
        idStringField.addChangeListener(this);
        checkContentRefListPanel1.addChangeListener(this);
        checkExportListPanel1.addChangeListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        checkPanel = new javax.swing.JPanel();
        systemIdLabel = new javax.swing.JLabel();
        systemIdCombo = new javax.swing.JComboBox();
        idCaption = new javax.swing.JLabel();
        idStringField = new com.g2inc.scap.editor.gui.dialogs.editors.oval.datatype.string.PatternedStringField();
        checkContentRefListPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.CheckContentRefListPanel();
        checkExportListPanel1 = new com.g2inc.scap.editor.gui.windows.xccdf.CheckExportListPanel();

        checkPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Check", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.SystemColor.windowText));
        checkPanel.setLayout(new java.awt.GridBagLayout());

        systemIdLabel.setText("System ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(7, 8, 0, 0);
        checkPanel.add(systemIdLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        checkPanel.add(systemIdCombo, gridBagConstraints);

        idCaption.setText("id (optional):");
        idCaption.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        checkPanel.add(idCaption, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        checkPanel.add(idStringField, gridBagConstraints);

        checkContentRefListPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Check Content Refs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.SystemColor.windowText));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        checkPanel.add(checkContentRefListPanel1, gridBagConstraints);

        checkExportListPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CheckExports", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.SystemColor.windowText));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        checkPanel.add(checkExportListPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        add(checkPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.g2inc.scap.editor.gui.windows.xccdf.CheckContentRefListPanel checkContentRefListPanel1;
    private com.g2inc.scap.editor.gui.windows.xccdf.CheckExportListPanel checkExportListPanel1;
    private javax.swing.JPanel checkPanel;
    private javax.swing.JLabel idCaption;
    private com.g2inc.scap.editor.gui.dialogs.editors.oval.datatype.string.PatternedStringField idStringField;
    private javax.swing.JComboBox systemIdCombo;
    private javax.swing.JLabel systemIdLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public JFrame getParentWin()
    {
        return parentWin;
    }

    @Override
    public void setParentWin(JFrame parentWin)
    {
        this.parentWin = parentWin;
    }

    @Override
    public void stateChanged(ChangeEvent e)
    {
        Object src = e.getSource();
        if (src == idStringField)
        {
            if (idStringField.getValue() == null || idStringField.getValue().trim().equals("")) {
                // id field is optional, its not an error if its missing
                check.setId("");
            }
            else if (idStringField.isValidInput())
            {
                check.setId(idStringField.getValue());
                idCaption.setForeground(idStringField.getNormalTextColor());
                notifyRegisteredListeners();
            }
            else
            {
                idCaption.setForeground(idStringField.getErrorTextColor());
            }
        }
        else if (src == checkContentRefListPanel1)
        {
            check.setCheckContentRefList(checkContentRefListPanel1.getDoc());
            notifyRegisteredListeners();
        }
        else if (src == checkExportListPanel1)
        {
            check.setExportList(checkExportListPanel1.getDoc());
            notifyRegisteredListeners();
        }
    }

    public void setDoc(Check check)
    {
        this.check = check;
        String system = check.getSystem();
        int itemCount = systemIdCombo.getItemCount();
        String item = null;
        for (int i=0; i < itemCount; i++) {
            item = (String) systemIdCombo.getItemAt(i);
            if (item.equals(system)) {
                systemIdCombo.setSelectedIndex(i);
                break;
            }
            item = null;
        }
        if (item == null) {
            // checking system not found in combo box, add it and mark it selected
            systemIdCombo.addItem(system);
            systemIdCombo.setSelectedItem(system);
        }
//        systemTextField.setText(system);
        idStringField.setValue(check.getId());
        checkContentRefListPanel1.setCheckSystem(system);
        checkContentRefListPanel1.setDoc(check.getCheckContentRefList());
        checkContentRefListPanel1.addChangeListener(this);
        checkExportListPanel1.setDoc(check.getExportList());
        checkExportListPanel1.addChangeListener(this);
    }

    @Override
    public Object getData()
    {
        return check;
    }

    @Override
    public void setData(Object data)
    {
        setDoc((Check) data);
    }

    @Override
    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
        parentEditor.setTitle("Check Content Ref Editor");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == systemIdCombo) {
            String selectedSystem = (String) systemIdCombo.getSelectedItem();
            if (selectedSystem != null) {
                check.setSystem(selectedSystem);
            }
        }
    }
}
