package com.g2inc.scap.editor.gui.dialogs.editors.xccdf;

/* ESCAPE Software   Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import com.g2inc.scap.editor.gui.windows.common.ChangeNotifierPanel;
import com.g2inc.scap.editor.gui.windows.common.DocumentListenerAdaptor;
import com.g2inc.scap.library.domain.xccdf.ChoicesElement;
import com.g2inc.scap.library.domain.xccdf.SelValueElement;
import com.g2inc.scap.library.domain.xccdf.ValueOperatorEnum;
import com.g2inc.scap.library.domain.xccdf.ValueTypeEnum;
import com.g2inc.scap.library.domain.xccdf.XCCDFBenchmark;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.event.DocumentEvent;

public class ChoicesElementEditor extends ChangeNotifierPanel implements IEditorPage, ChangeListener, ItemListener
{
    private EditorDialog parentEditor = null;
    private ChoicesElement choicesElement = null;

    private void initCheckBox() {
		mustMatchCheckBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				choicesElement.setMustMatch(e.getStateChange() == ItemEvent.SELECTED);
			}
		});
    }
    
    private void initTextField() {
        selectorTextField.getDocument().addDocumentListener(new DocumentListenerAdaptor() {

			@Override
			public void changed(DocumentEvent de) {
				choicesElement.setSelector(selectorTextField.getText());
			}
		});
    }
    
    public void itemStateChanged(ItemEvent ie){
        Object src = ie.getSource();
        if (src == mustMatchCheckBox) {
            choicesElement.setMustMatch(ie.getStateChange() == ItemEvent.SELECTED);
        }
    }

    private void initComponents2()
    {
        initCheckBox();
        initTextField();
        simpleOrComplexChoicesListPanel.setSelectorAttribute(false);
        simpleOrComplexChoicesListPanel.addChangeListener(this);
        simpleOrComplexChoicesListPanel.setSimpleElementName("choice");
        simpleOrComplexChoicesListPanel.setComplexElementName("complex-choice");
    }

    public ChoicesElementEditor()
    {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        SelectorCaption = new javax.swing.JLabel();
        selectorTextField = new javax.swing.JTextField();
        mustMatchCheckBox = new javax.swing.JCheckBox();
        simpleOrComplexChoicesListPanel = new com.g2inc.scap.editor.gui.windows.xccdf.SimpleOrComplexValueListPanel();

        SelectorCaption.setText("Selector:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(SelectorCaption, gridBagConstraints);

        selectorTextField.setPreferredSize(new java.awt.Dimension(255, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 5, 6);
        add(selectorTextField, gridBagConstraints);

        mustMatchCheckBox.setText("Must Match?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 0, 0);
        add(mustMatchCheckBox, gridBagConstraints);

        simpleOrComplexChoicesListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choices Editor"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        add(simpleOrComplexChoicesListPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SelectorCaption;
    private javax.swing.JCheckBox mustMatchCheckBox;
    private javax.swing.JTextField selectorTextField;
    private com.g2inc.scap.editor.gui.windows.xccdf.SimpleOrComplexValueListPanel simpleOrComplexChoicesListPanel;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public ChoicesElement getData()
    {
        return choicesElement;
    }

    
    @Override
    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
        parentEditor.setTitle("Choice List Editor");
    }

    
    @Override
    public void setData(Object data)
    {
        choicesElement = (ChoicesElement) data;
        if (choicesElement != null) {
            XCCDFBenchmark benchmark = (XCCDFBenchmark) choicesElement.getSCAPDocument();
            benchmark.getBundle();
            if (choicesElement.getSelector() == null) {
                selectorTextField.setText("");
            } else {
                selectorTextField.setText(choicesElement.getSelector());
            }
            selectorTextField.requestFocus();
            
            mustMatchCheckBox.setSelected(choicesElement.isMustMatch());
            mustMatchCheckBox.addItemListener(this);

            simpleOrComplexChoicesListPanel.setDoc(choicesElement.getChoiceList());
        }
    }
	
    @Override
    public void stateChanged(ChangeEvent e) {
        Object eventSource = e.getSource();
        if (eventSource == simpleOrComplexChoicesListPanel) {
            choicesElement.setChoiceList(simpleOrComplexChoicesListPanel.getDoc());
            notifyRegisteredListeners();
        } 
    }
}
