package com.g2inc.scap.editor.gui.dialogs.editors.oval.variable;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.g2inc.scap.editor.gui.dialogs.editors.EditorDialog;
import com.g2inc.scap.editor.gui.dialogs.editors.IEditorPage;
import com.g2inc.scap.library.domain.oval.OperEnum;
import com.g2inc.scap.library.domain.oval.OvalDefinitionsDocument;
import com.g2inc.scap.library.domain.oval.OvalVariable;
import com.g2inc.scap.library.domain.oval.TypeEnum;
import com.g2inc.scap.library.domain.oval.VariableRestriction;

public class VariableRestrictionEditor extends javax.swing.JPanel implements IEditorPage
{
    private VariableRestriction varComp = null;
    private EditorDialog parentEditor = null;
    OvalVariable ovalVar = null;

    private void initTextFields()
    {
        valueTextField.getDocument().addDocumentListener(new DocumentListener()
        {
            public void insertUpdate(DocumentEvent de)
            {
                common(de);
            }

            public void removeUpdate(DocumentEvent de)
            {
                common(de);
            }

            public void changedUpdate(DocumentEvent de)
            {
                common(de);
            }

            private void common(DocumentEvent de)
            {
                String text = valueTextField.getText();
                varComp.setValue(text);
            }
        });
    }

    private void initComboBox() {
        operComboBox.removeAllItems();
        if (ovalVar == null) {
            return;
        }
        OvalDefinitionsDocument ovalDoc = ovalVar.getParentDocument();
        TypeEnum datatype = TypeEnum.valueOf(ovalVar.getDatatype().toUpperCase());
        OperEnum[] operations = ovalDoc.getOperationsForDatatype(datatype);

        for (int i=0; i<operations.length; i++) {
            OperEnum operEnum = operations[i];
            operComboBox.addItem(operEnum.toString());
        }
        if (varComp != null) {
            String operation = varComp.getOperation();
            if (operation == null) {
                operComboBox.setSelectedIndex(-1);
            } else {
                operComboBox.setSelectedItem(operation);
            }
        }
        operComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                String operation = (String) operComboBox.getSelectedItem();
                varComp.setOperation(operation);
            }
        });
    }

    private void initComponents2()
    {
        initTextFields();
        initComboBox();
    }

    public VariableRestrictionEditor(VariableRestriction varComp)
    {
        initComponents();
        setVariableRestriction(varComp);
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        valueCaption = new javax.swing.JLabel();
        valueTextField = new javax.swing.JTextField();
        operCaption = new javax.swing.JLabel();
        operComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        valueCaption.setText("Restriction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(9, 10, 0, 2);
        add(valueCaption, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 3);
        add(valueTextField, gridBagConstraints);

        operCaption.setText("Operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 2);
        add(operCaption, gridBagConstraints);

        operComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 3);
        add(operComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel operCaption;
    private javax.swing.JComboBox operComboBox;
    private javax.swing.JLabel valueCaption;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables

    public String getData()
    {   
        return null;
    }

    public void setEditorDialog(EditorDialog editorDialog)
    {
        parentEditor = editorDialog;
        parentEditor.setTitle("Variable Restriction Editor");
    }

    public void setData(Object data)
    {
    	setVariableRestriction((VariableRestriction) data);
    }

    public void setOvalVariable(OvalVariable ovalVar) {
        this.ovalVar = ovalVar;
        initComboBox();
    }

    private void setVariableRestriction(VariableRestriction varComp) {
        this.varComp = varComp;
        valueTextField.setText(varComp.getValue());
        initComboBox();
    }

}
