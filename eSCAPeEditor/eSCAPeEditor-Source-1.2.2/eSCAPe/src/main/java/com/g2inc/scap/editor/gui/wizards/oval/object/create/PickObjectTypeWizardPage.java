package com.g2inc.scap.editor.gui.wizards.oval.object.create;
/* ESCAPE Software Copyright 2010 G2, Inc. - All rights reserved.
*
* ESCAPE is open source software distributed under GNU General Public License Version 3.  ESCAPE is not in the public domain 
* and G2, Inc. holds its copyright.  Redistribution and use in source and binary forms, with or without modification, are
* permitted provided that the following conditions are met:

* 1. Redistributions of ESCAPE source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the ESCAPE Software distribution. 
* 3. Neither the name of G2, Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL G2, INC., THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.

* You should have received a copy of the GNU General Public License Version 3 along with this program. 
* If not, see http://www.gnu.org/licenses/ for a copy.
*/

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import org.apache.log4j.Logger;

import com.g2inc.scap.editor.gui.wizards.Wizard;
import com.g2inc.scap.editor.gui.wizards.WizardPage;
import com.g2inc.scap.library.schema.NameDoc;

public class PickObjectTypeWizardPage extends WizardPage
{
    private NewObjectWizard parentWiz = null;

    private static Logger log = Logger.getLogger(PickObjectTypeWizardPage.class);

    private void initCombo()
    {        
        objectTypeCombo.addActionListener(new ActionListener()
        {
            
            public void actionPerformed(ActionEvent ae)
            {
                Object selected = objectTypeCombo.getSelectedItem();

                if(!(selected instanceof NameDoc))
                {
                    return;
                }

                NameDoc item = (NameDoc) selected;

                parentWiz.setChosenType(item.getName());
                docTextArea.setText(item.getDocumentation());

                setSatisfied(true);
            }
        });
        
        setChosenPlatForm(parentWiz.getChosenPlatform());
    }

    private void initComponents2()
    {
        initCombo();
    }

    public PickObjectTypeWizardPage(NewObjectWizard wiz)
    {
        initComponents();
        parentWiz = wiz;
        initComponents2();
        objectTypeCombo.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        typePanel = new javax.swing.JPanel();
        stateTypeCaption = new javax.swing.JLabel();
        objectTypeCombo = new javax.swing.JComboBox();
        docPanel = new javax.swing.JPanel();
        docTextScroller = new javax.swing.JScrollPane();
        docTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        typePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pick type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText)); // NOI18N
        typePanel.setLayout(new java.awt.GridBagLayout());

        stateTypeCaption.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 9, 3, 6);
        typePanel.add(stateTypeCaption, gridBagConstraints);

        objectTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        objectTypeCombo.setMaximumSize(null);
        objectTypeCombo.setMinimumSize(null);
        objectTypeCombo.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 5, 8);
        typePanel.add(objectTypeCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(typePanel, gridBagConstraints);

        docPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Documentation from schema", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText)); // NOI18N
        docPanel.setLayout(new java.awt.GridBagLayout());

        docTextArea.setBackground(new java.awt.Color(240, 240, 240));
        docTextArea.setColumns(20);
        docTextArea.setEditable(false);
        docTextArea.setFont(new java.awt.Font("Monospaced", 0, 12));
        docTextArea.setLineWrap(true);
        docTextArea.setRows(5);
        docTextArea.setWrapStyleWord(true);
        docTextArea.setMaximumSize(null);
        docTextArea.setPreferredSize(null);
        docTextScroller.setViewportView(docTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        docPanel.add(docTextScroller, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        add(docPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel docPanel;
    private javax.swing.JTextArea docTextArea;
    private javax.swing.JScrollPane docTextScroller;
    private javax.swing.JComboBox objectTypeCombo;
    private javax.swing.JLabel stateTypeCaption;
    private javax.swing.JPanel typePanel;
    // End of variables declaration//GEN-END:variables

    
    @Override
	public Object getData()
    {
        return null;
    }

    
    @Override
	public void setData(Object data)
    {
    }

    
    @Override
	public void setWizard(Wizard wizard)
    {
        parentWiz = (NewObjectWizard) wizard;
    }

    
    @Override
	public String getPageTitle()
    {
        return "Type";
    }

    public void setChosenPlatForm(String platform)
    {
        objectTypeCombo.removeAllItems();

        List<NameDoc> options = parentWiz.getOvalDefDoc().getValidObjectTypes(platform);

        for (int x = 0; x < options.size(); x++)
        {
            objectTypeCombo.addItem(options.get(x));
        }

        objectTypeCombo.setSelectedIndex(0);
        parentWiz.setChosenType(((NameDoc) objectTypeCombo.getSelectedItem()).getName());
    }

    
    @Override
	public void performFinish()
    {
    }
}
